{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\n\nconst useFetch = url => {\n  _s();\n\n  const [data, setData] = useState(null);\n  const [isPending, setIsPending] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    console.log('use effect ran');\n    fetch(url).then(res => {\n      if (!res.ok) {\n        throw Error('Could not fetch data for that resourse');\n      }\n\n      return res.json();\n    }).then(data => {\n      setData(data);\n      setIsPending(false);\n      setError(null);\n    }).catch(err => {\n      setIsPending(false);\n      setError(err.message);\n      console.log(err.message);\n    });\n  }, [url]); //when url changes it will rerun to fetch data for that end point \n\n  return {\n    data,\n    isPending,\n    error\n  };\n};\n\n_s(useFetch, \"VxPkICXS4AfkXU1R8tuEJAA8e58=\");\n\nexport default useFetch;","map":{"version":3,"sources":["/home/george/Desktop/javascript/practive js/netninjacourse/netninjafullcourse/src/useFetch.js"],"names":["useState","useEffect","useFetch","url","data","setData","isPending","setIsPending","error","setError","console","log","fetch","then","res","ok","Error","json","catch","err","message"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,MAAMC,QAAQ,GAAIC,GAAD,IAAS;AAAA;;AAEtB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAM,CAACM,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,IAAD,CAAlC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZS,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACAC,IAAAA,KAAK,CAACT,GAAD,CAAL,CACKU,IADL,CACUC,GAAG,IAAI;AACT,UAAI,CAACA,GAAG,CAACC,EAAT,EAAa;AACT,cAAMC,KAAK,CAAC,wCAAD,CAAX;AACH;;AACD,aAAOF,GAAG,CAACG,IAAJ,EAAP;AACH,KANL,EAOKJ,IAPL,CAOUT,IAAI,IAAI;AACVC,MAAAA,OAAO,CAACD,IAAD,CAAP;AACAG,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACH,KAXL,EAYKS,KAZL,CAYWC,GAAG,IAAI;AACVZ,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,MAAAA,QAAQ,CAACU,GAAG,CAACC,OAAL,CAAR;AACAV,MAAAA,OAAO,CAACC,GAAR,CAAYQ,GAAG,CAACC,OAAhB;AAEH,KAjBL;AAmBH,GArBQ,EAqBN,CAACjB,GAAD,CArBM,CAAT,CANsB,CA2BZ;;AAEV,SAAO;AAACC,IAAAA,IAAD;AAAOE,IAAAA,SAAP;AAAkBE,IAAAA;AAAlB,GAAP;AACH,CA9BD;;GAAMN,Q;;AAgCN,eAAeA,QAAf","sourcesContent":["import { useState, useEffect } from \"react\";\n\nconst useFetch = (url) => {\n\n    const [data, setData] = useState(null);\n    const [isPending, setIsPending] = useState(true);\n    const [error, setError] = useState(null)\n\n    useEffect(() => {\n        console.log('use effect ran');\n        fetch(url)\n            .then(res => {\n                if (!res.ok) {\n                    throw Error('Could not fetch data for that resourse')\n                }\n                return res.json();\n            })\n            .then(data => {\n                setData(data);\n                setIsPending(false)\n                setError(null)\n            })\n            .catch(err => {\n                setIsPending(false);\n                setError(err.message);\n                console.log(err.message);\n\n            })\n\n    }, [url]) //when url changes it will rerun to fetch data for that end point \n\n    return {data, isPending, error}\n}\n\nexport default useFetch;"]},"metadata":{},"sourceType":"module"}