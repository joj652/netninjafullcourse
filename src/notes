The Net Ninja React Tutorial.
Table of content
1. Introduction
    What is react?
    Javascript library used to create website.
    Allows us to easily create Single Page Apps (SPA)

2. Creating a react application 

3. Components and templates 
    components are the building blocks of react application 
    eg Nav bar ,article, sidebar etc... 
    its our job to create this components 

    each component will contain its own
        .Template .. this is the html of the content 
        .logic ... eg function that runs when a button is clicked 

4. Dynamic values in templates(html)
    prevent hard coding thus improving reusability

5. Multiple components 
    App component is the root of our component

6. Adding css

7. Click Events 
    create a button that invoked a function when clicked.

    event object or event parameter(e)


    const handleClick = (e)=>{
        console.log("Hello, Ninjas", e);
        // alert("Hello Ninjas")
    }

    const handleClickAgain = (name, e) =>
    {
        console.log("hello " + name , e.target);
        // alert("hello " + name)
    }

     <div className="home">
            <h2>HomePage</h2>
            {/* we dont add the brackets because it will invoke the function even
            before we have clicked the button  */}
            <button onClick = {handleClick} >Click Me</button>

            {/* if you want to pass parameter to function without activating it unintentionally we do this */}
            <button onClick={(e) => handleClickAgain("Mario", e)}>Click Me Again</button>
            {/* <BlogList blogs={blogs.filter((blog) => blog.author === 'mario')} title="Mario's blogs!" handleDelete = {handleDelete} /> */}
            

        </div>

8. useState

    use to make a value reactive.. react will watch the value for changes the rerenders the tamplete
    with that new value.
    we use a hook know as useState to perform this
    can be used with any data type

9. Intro to react dev tools 
    chrome / firefox extensions 
    give us extra info about react based project(website)

10. Outputing list 
    using map function to output list of data.

    <div className="home">
            {blogs.map((blog) => (
                <div className="blog-preview" key = {blog.id}>
                    <h2>{ blog.title }</h2>
                    <p>Written by {blog.author}</p>
                </div>
            ))}
        </div>

11. Props 
    enables reusing of code.. you just pass parameters (props) to the component that you want and renders out result 
    without having to rewrite the component

12. Reusing Components
    using same component to output different data 

13. Functions as props

14. useEffect hook
    runs a function every render of a component. 
    fires in every render
    we pass a function the useEffect so that it can run during rendering 
    Very useful when we want to run a code in every render 

15. useEffect Dependancies 
    we have seen that useEffect fires after every render but we don't want that.. 
    thats y we introduce Dependancies.... to fire only at certain situation 
    empty array Dependancies makes the function run only once. [] ie.. first initial render 

16. JSON Server
    allows us to build a fake rest api

17. Fetching data with useEffect 

    useEffect(()=> {
        console.log('use effect ran');
        fetch("http://localhost:8000/blogs")
        .then(res =>{
           return res.json();
        })
        .then((data => {
            setBlogs(data);
        }))
       
    },[])


    {/* //first check if blog has data .. if null means false */}
            {blogs && <BlogList blogs={blogs} title="All Blogs!" />}

18. conditional Loading message
    display loading while fetching 

    we use a state... we set it first to true.. then when data is receive we set it to false 

    const [isPending, setIsPending] = useState(true);

    {isPending && <div> Loading ... </div>}

19. Handling Fetch Errors
    handle any kind of error when we try to fetch.. it can be error sent from server or
    connection error to connect to server etc

    useEffect(() => {
        console.log('use effect ran');
        fetch("http://localhost:8000/blogs")
            .then(res => {
                if (!res.ok) {
                    throw Error('Could not fetch data for that resourse')
                }
                return res.json();
            })
            .then(data => {
                setBlogs(data);
                setIsPending(false)
                setError(null)
            })
            .catch(err => {
                setIsPending(false);
                setError(err.message);
                console.log(err.message);

            })

    }, [])

    <div className="home">
            {error && <div>{error}</div>}
            {isPending && <div> Loading ... </div>}
            {/* //first check if blog has data .. if null means false */}
            {blogs && <BlogList blogs={blogs} title="All Blogs!" />}
        </div>


20. Making custom Hooks
    enable reusing code .. eg useEffect 
    custom Effect in react need to start with the word "use....." eg useEffect
    nice stuff....

21. The react Router 
    this prevents sending web pages back and forth  from server.

    First thing is you have to install new react package

    Switch makes sure that only one route is show at a particular time 

22. exact match Route
    We use the exact key word in Route to make the router not confuse route... 
     Switch component ensures that only one component is show at any particular time 
     if we don't use switch the we can render many components at the same time


23. Router Links 

    prevent the send request to the server every time we want to load a page.

24. useEffect Cleanup
    When we use the Link tag, the use Effect in the home tries to render the home page while we 
    have already moved to another page.. this gives us a warning. 
    (can't perfrom a react state update on an unmounted component)
    to combat this, we use useEffect cleanup.
    we need a method to stop useEffect when the component unmounts
    will use useEffect hook and aborter in java 

25. Route parameters
    some times we want to pass dynamic value as part of route
    eg /blog/123  where 123 is the id of the blog we want to see.

26. Reusing our custom hook useFetch to retrive specific blogs

27. controlled input (forms)
    adding user's blog
    controllled input is a way in react of setting input fields in form and track there value in state.
    to keep track of what the user types will use state

28. submit event (submitting a form)

    then you will create a blog object that will be saved in your db
    we dont need to create an id because this will be done automatically 

29. Making a POST request
    after creating the object, lets send this to server using the POST request

30. Programmatic Redirects
    redirect user after action has happened
    we use another hook called useHistory.. allow user to go back and forward through history and also add a new page

31. Deleting blogs (DELETE Request)

32. Setting up a 404 Page is a url doesnt exist 
    